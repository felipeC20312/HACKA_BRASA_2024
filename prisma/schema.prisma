// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  Client
  Investor
  None
}

model Wallet {
  id        String   @id @default(cuid())
  balance   Float    // Balance is number of tokens.
  // Relacionamento com a tabela Cliente
  // Relacionamento com a tabela Investidor

  user User @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model User {
  id        String   @id @default(cuid()) // Match kinde ID
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com a tabela Cliente
  client Client?

  // Relacionamento com a tabela Investidor
  investor Investor?

  role Role @default(None)

  @@index([id])
  Wallet Wallet[]
}

// Coloca emprestimos e vende com tokens
model Client {
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  cnpj String @unique
  businessName String
  
  address String
  CEP String
  city String
  state String

  // Razão Social: Tipo da empresa
  businessType String

  grade Float @default(10)// Nota de crédito da empresa

  Recebivel Recebivel[]
}

// Quem compra tokens
model Investor {
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  Contract Contract[]
}

model Token {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Um ativo que pode ser comprado e vendido
// O recebivel pertence a um usuario de tipo Cliente
// O recebivel tem um contrato com um ou mais investidores
model Recebivel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  description String
  targetAmount Float // tokens is inputMoney number of tokens
  rentability Float // Rentabilidade do recebivel, em porcentagem.

  paymentType String // Semanal, Mensal, Semestral, Anual

  startDate DateTime
  endDate DateTime

  status Status

  moneyRaised Float @default(0) // How many tokens have been purchased

  // Relacionamento com a tabela Cliente: Quem criou o recebivel
  owner Client @relation(fields: [ownerId], references: [userId])
  ownerId String

  Contract Contract[]

  @@index([ownerId])
}

enum Status {
  Aberto
  Pagando
  Captado
  Falido
}

// Quando o user compra um ou mais tokens de um recebivel, ele tem um contrato
// com aquele recebivel.
model Contract {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com a tabela Recebivel
  recebivel Recebivel @relation(fields: [recebivelId], references: [id])
  recebivelId String

  // Relacionamento com a tabela Investidor
  investor Investor @relation(fields: [investorId], references: [userId])
  investorId String
  
  // Quantidade de tokens comprados
  tokensBought Int

  @@index([recebivelId])
  @@index([investorId])
}